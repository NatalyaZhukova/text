      Во время своей работы приложение иногда сталкивается с разного рода нештатными ситуациями. При вызове метода некоторого объекта он может обнаружить у себя внутренние проблемы (неверные значения переменных), найти ошибки в других объектах или данных (например, в файле или сетевом адресе), определить факт нарушения своего базового контракта (чтение данных из закрытого потока) и так далее.   
      Многие программисты не проверяют все возможные источники ошибок, и на то есть веская причина: если при каждом вызове метода анализировать все мыслимые ошибки, текст программы становится совершенно невразумительным. Таким образом достигается компромисс между правильностью (проверка всех ошибок) и ясностью (отказ от загромождения основной логики программы множеством проверок).      
###
 try {
 }
 catch (Exception e) {
 }
 finally {
 }
###
      Исключения предоставляют удобную возможность проверки ошибок без загромождения текста программы. Кроме того, исключения непосредственно сигнализируют об ошибках, а не меняют значения флагов или каких-либо полей, которые потом нужно проверять. Исключения превращают ошибки, о которых может сигнализировать метод, в явную часть контракта этого метода. Список исключений виден программисту, проверяется компилятором и сохраняется в расширенных классах, переопределяющих данный метод.       
      Исключение Exception возбуждается, когда возникает неожиданное ошибочное состояние. Метод Object.toString() позволяет проверить содержимое объекта. Затем исключение  перехватывается соответствующим условием в стеке вызова методов. Если исключение не перехвачено, срабатывает обработчик исключения по умолчанию, который обычно выводит полезную информацию об исключении (скажем, содержимое стека вызовов).   